{"version":3,"sources":["List.js","BossRush.js","App.js","reportWebVitals.js","index.js"],"names":["List","Col","this","props","list","map","boss","Row","bosses","React","Component","BossRush","state","bossLists","lists","buttonClicked","bind","e","value","target","innerText","setState","newBossLists","_","forEach","console","log","bossList","indexOf","push","filter","Container","fluid","className","type","onClick","style","alignText","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6gBA2BeA,E,4JAtBX,WAAU,IAAD,OACL,OACI,cAACC,EAAA,EAAD,UAEQC,KAAKC,MAAMC,KAAKC,KAAI,SAACC,GAAD,OAChB,cAACC,EAAA,EAAD,UACI,4BACK,EAAKJ,MAAMK,OAAOF,MAFjBA,Y,GANfG,IAAMC,WCmEVC,G,wDA9DX,WAAYR,GAAQ,IAAD,8BACf,cAAMA,IAEDS,MAAQ,CACTJ,OAAQ,GACRK,UAAWC,GAGf,EAAKC,cAAgB,EAAKA,cAAcC,KAAnB,gBARN,E,iDAWnB,SAAcC,GACV,IAAMC,EAAQD,EAAEE,OAAOC,UACvBlB,KAAKmB,UAAS,SAACT,GACX,IAAMJ,EAAM,sBAAOI,EAAMJ,QAAb,CAAqBU,IAC3BL,EAAS,YAAOD,EAAMC,WACtBS,EAAe,GAQrB,OAPAC,IAAEC,QAAQX,GAAW,SAACT,GAClBqB,QAAQC,IAAItB,GACZqB,QAAQC,IAAIR,GACZO,QAAQC,IAAIC,EAAST,IACrBO,QAAQC,IAAItB,EAAKwB,QAAQD,EAAST,KAClCI,EAAaO,KAAKN,IAAEO,OAAO1B,GAAM,SAACE,GAAD,OAAUA,IAASqB,EAAST,UAE1D,CAAEV,SAAQK,UAAWS,Q,oBAIpC,WAAU,IAAD,OACL,OACI,eAACS,EAAA,EAAD,CAAWC,OAAK,EAACC,UAAU,MAA3B,UACI,cAAC1B,EAAA,EAAD,UAEQgB,IAAElB,IAAIH,KAAKU,MAAMC,WAAW,SAACT,GAAD,OACxB,cAAC,EAAD,CAAMI,OAAQmB,EAAUvB,KAAMA,GAA9B,eAAiDA,SAI7D,cAACG,EAAA,EAAD,UAEQL,KAAKU,MAAMC,UAAUR,KAAI,SAACD,GAAD,OACrB,cAACH,EAAA,EAAD,UACI,wBAAQiC,KAAK,SAASC,QAAS,EAAKpB,cAApC,SAAoDY,EAASvB,EAAK,aAKlF,eAACG,EAAA,EAAD,0BAGQL,KAAKU,MAAMJ,OAAOH,KAAI,SAACC,GAAD,OAClB,cAACL,EAAA,EAAD,CAAKmC,MAAO,CAAEC,UAAW,UAAzB,SACK/B,iB,GArDVG,IAAMC,YCEd4B,MANf,WACI,OACI,cAAC,EAAD,KCMOC,EAZS,SAACC,GACjBA,GAAeA,aAAuBC,UACtC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QACzDJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDpBQ,IAASC,OACL,cAAC,IAAMC,WAAP,UACI,cAAC,EAAD,MAEJC,SAASC,eAAe,SAM5Bb,K","file":"static/js/main.c0052f80.chunk.js","sourcesContent":["import React from 'react';\nimport { Row, Col } from 'react-bootstrap';\nimport PropTypes from 'prop-types';\n\nclass List extends React.Component {\n    render() {\n        return (\n            <Col>\n                {\n                    this.props.list.map((boss) => (\n                        <Row key={boss}>\n                            <p>\n                                {this.props.bosses[boss]}\n                            </p>\n                        </Row>\n                    ))\n                }\n            </Col>\n        );\n    }\n}\n\nList.propTypes = {\n    list: PropTypes.arrayOf(PropTypes.number).isRequired,\n    bosses: PropTypes.objectOf(PropTypes.string).isRequired,\n};\n\nexport default List;\n","import React from 'react';\nimport _ from 'lodash';\nimport { Container, Row, Col } from 'react-bootstrap';\nimport bossList from './data/bosses.json';\nimport lists from './data/lists.json';\nimport List from './List';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nclass BossRush extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            bosses: [],\n            bossLists: lists,\n        };\n\n        this.buttonClicked = this.buttonClicked.bind(this);\n    }\n\n    buttonClicked(e) {\n        const value = e.target.innerText;\n        this.setState((state) => {\n            const bosses = [...state.bosses, value];\n            const bossLists = [...state.bossLists];\n            const newBossLists = [];\n            _.forEach(bossLists, (list) => {\n                console.log(list);\n                console.log(value);\n                console.log(bossList[value]);\n                console.log(list.indexOf(bossList[value]));\n                newBossLists.push(_.filter(list, (boss) => boss !== bossList[value]));\n            });\n            return { bosses, bossLists: newBossLists };\n        });\n    }\n\n    render() {\n        return (\n            <Container fluid className=\"App\">\n                <Row>\n                    {\n                        _.map(this.state.bossLists, (list) => (\n                            <List bosses={bossList} list={list} key={`list-${list}`} />\n                        ))\n                    }\n                </Row>\n                <Row>\n                    {\n                        this.state.bossLists.map((list) => (\n                            <Col>\n                                <button type=\"button\" onClick={this.buttonClicked}>{bossList[list[0]]}</button>\n                            </Col>\n                        ))\n                    }\n                </Row>\n                <Row>\n                    Your Bosses:\n                    {\n                        this.state.bosses.map((boss) => (\n                            <Col style={{ alignText: 'center' }}>\n                                {boss}\n                            </Col>\n                        ))\n                    }\n                </Row>\n            </Container>\n        );\n    }\n}\n\nexport default BossRush;\n","import React from 'react';\nimport './App.css';\nimport BossRush from './BossRush';\n\nfunction App() {\n    return (\n        <BossRush />\n    );\n}\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n            getCLS(onPerfEntry);\n            getFID(onPerfEntry);\n            getFCP(onPerfEntry);\n            getLCP(onPerfEntry);\n            getTTFB(onPerfEntry);\n        });\n    }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}